# Практическая работа №1: Информационная система расчёта уравнений (MVC)

# === Model ===
class EquationModel:
    def __init__(self):
        self.expression = ""

    def set_expression(self, expression):
        self.expression = expression

    def calculate(self):
        try:
            # Проверка корректности выражения
            if not self.expression or not self.expression[0].isdigit() or not self.expression[-1].isdigit():
                raise ValueError("Уравнение должно начинаться и заканчиваться числом")
            # Замена возведения в степень
            safe_expr = self.expression.replace("^", "**")
            result = eval(safe_expr)
            return result
        except Exception as e:
            return f"Ошибка вычисления: {str(e)}"

# === View ===
class EquationView:
    def show_input_prompt(self):
        return input("Введите уравнение: ")

    def show_result(self, result):
        print(f"Результат: {result}")

    def show_error(self, message):
        print(f"Ошибка: {message}")

# === Controller ===
class EquationController:
    def __init__(self, model, view):
        self.model = model
        self.view = view

    def run(self):
        expr = self.view.show_input_prompt()
        if expr.count('+') + expr.count('-') + expr.count('*') + expr.count('/') + expr.count('//') + expr.count('^') > 100:
            self.view.show_error("Превышено количество операций (макс. 100)")
            return
        self.model.set_expression(expr)
        result = self.model.calculate()
        self.view.show_result(result)

# === Запуск программы ===
if __name__ == "__main__":
    model = EquationModel()
    view = EquationView()
    controller = EquationController(model, view)
    controller.run()
